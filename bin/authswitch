#!/usr/bin/env bash
set -euo pipefail

AUTH_VERSION="1.0.0"
AUTH_NO_COLOR=${AUTH_NO_COLOR:-0}
AUTH_DRY_RUN=${AUTH_DRY_RUN:-0}
AUTH_ASSUME_YES=${AUTH_ASSUME_YES:-0}

resolve_lib_dir() {
    local script_dir
    local candidate=""

    if [[ -n ${AUTH_LIB_DIR:-} && -d "${AUTH_LIB_DIR}" ]]; then
        printf '%s\n' "${AUTH_LIB_DIR}"
        return
    fi

    local source_path=""
    if [[ -n ${BASH_SOURCE+x} ]]; then
        source_path="${BASH_SOURCE[0]}"
    fi

    if [[ -n "${source_path}" && "${source_path}" != "-" ]]; then
        script_dir=$(cd "$(dirname "${source_path}")" && pwd)
        candidate=$(cd "${script_dir}/.." && pwd)
        if [[ -f "${candidate}/lib/ui.sh" ]]; then
            printf '%s\n' "${candidate}/lib"
            return
        fi
    fi

    if [[ -d "/usr/local/share/authswitch/lib" && -f "/usr/local/share/authswitch/lib/ui.sh" ]]; then
        printf '%s\n' "/usr/local/share/authswitch/lib"
        return
    fi

    if [[ -n ${candidate} ]]; then
        printf '%s\n' "${candidate}/lib"
    else
        printf '%s\n' "./lib"
    fi
}

AUTH_LIB_DIR=$(resolve_lib_dir)
export AUTH_LIB_DIR

# shellcheck source=lib/ui.sh
source "${AUTH_LIB_DIR}/ui.sh"
# shellcheck source=lib/users.sh
source "${AUTH_LIB_DIR}/users.sh"
# shellcheck source=lib/sshauth.sh
source "${AUTH_LIB_DIR}/sshauth.sh"

auth_init
auth_detect_service_manager

confirm_action() {
    local prompt="$1"
    if [[ ${AUTH_ASSUME_YES} -eq 1 ]]; then
        return 0
    fi
    ui_prompt_confirm "${prompt}"
}

parse_args() {
    POSITIONAL=()
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --dry-run)
                AUTH_DRY_RUN=1
                export AUTH_DRY_RUN
                shift
                ;;
            --yes)
                AUTH_ASSUME_YES=1
                export AUTH_ASSUME_YES
                shift
                ;;
            --no-color)
                AUTH_NO_COLOR=1
                export AUTH_NO_COLOR
                shift
                ;;
            --log)
                if [[ $# -lt 2 ]]; then
                    ui_error "--log requires a path argument."
                    exit 1
                fi
                AUTH_LOG_FILE="$2"
                export AUTH_LOG_FILE
                shift 2
                ;;
            --help)
                ui_usage
                exit 0
                ;;
            --version)
                ui_version
                exit 0
                ;;
            --)
                shift
                POSITIONAL+=("$@")
                break
                ;;
            -*)
                ui_error "Unknown option: $1"
                exit 1
                ;;
            *)
                POSITIONAL+=("$1")
                shift
                ;;
        esac
    done
    set -- "${POSITIONAL[@]}"
    SUBCOMMAND="${1:-interactive}"
    SUBCOMMAND_ARGS=("${POSITIONAL[@]:1}")
    ui_init
}

require_confirmation() {
    local prompt="$1"
    if ! confirm_action "${prompt}"; then
        ui_warn "Operation cancelled."
        exit 0
    fi
}

warn_pam_policy() {
    ui_warn "Reminder: PAM or MFA policies may still restrict password logins even after this change."
}

ensure_user_exists() {
    local username="$1"
    if ! users_exists "${username}"; then
        ui_error "User ${username} not found in system database."
        exit 1
    fi
}

cmd_status() {
    auth_status
}

cmd_enable_password() {
    warn_pam_policy
    require_confirmation "Enable global password authentication?"
    auth_modify_option "PasswordAuthentication" "yes"
}

cmd_disable_password() {
    warn_pam_policy
    require_confirmation "Disable global password authentication?"
    auth_modify_option "PasswordAuthentication" "no"
}

cmd_enable_root_password() {
    warn_pam_policy
    require_confirmation "Allow root password login?"
    auth_modify_option "PermitRootLogin" "yes"
}

cmd_disable_root_password() {
    warn_pam_policy
    require_confirmation "Disable root password login?"
    auth_modify_option "PermitRootLogin" "no"
}

cmd_allow_user() {
    local username="$1"
    if [[ -z "${username:-}" ]]; then
        ui_error "Missing username."
        exit 1
    fi
    ensure_user_exists "${username}"
    warn_pam_policy
    require_confirmation "Allow password login for ${username}?"
    auth_allow_user "${username}"
}

cmd_revoke_user() {
    local username="$1"
    if [[ -z "${username:-}" ]]; then
        ui_error "Missing username."
        exit 1
    fi
    warn_pam_policy
    require_confirmation "Revoke password login for ${username}?"
    auth_revoke_user "${username}"
}

cmd_list_backups() {
    local backups
    backups=$(auth_list_backups)
    if [[ -z "${backups}" ]]; then
        ui_info "No backups found in ${AUTH_BACKUP_DIR}."
        return
    fi
    printf '%s\n' "${backups}"
}

cmd_rollback() {
    local backup="$1"
    if [[ -z "${backup:-}" ]]; then
        ui_error "Specify the backup file to restore."
        exit 1
    fi
    require_confirmation "Restore ${AUTH_SSHD_CONFIG} from ${backup}?"
    auth_rollback "${backup}"
}

interactive_menu() {
    while true; do
        ui_heading "authswitch control panel"
        auth_status
        printf '\n'
        printf 'Options:\n'
        printf '  [1] Enable password authentication\n'
        printf '  [2] Disable password authentication\n'
        printf '  [3] Enable root password login\n'
        printf '  [4] Disable root password login\n'
        printf '  [5] Allow password for a user\n'
        printf '  [6] Revoke password for a user\n'
        printf '  [7] List backups\n'
        printf '  [8] Rollback from backup\n'
        printf '  [9] Exit\n'
        printf 'Select an option: '
        local choice
        if ! read -r choice; then
            printf '\n'
            break
        fi
        case "${choice}" in
            1) cmd_enable_password ;;
            2) cmd_disable_password ;;
            3) cmd_enable_root_password ;;
            4) cmd_disable_root_password ;;
            5)
                local selected
                if ! selected=$(users_select_interactive); then
                    ui_warn "No eligible users found or selection cancelled."
                else
                    cmd_allow_user "${selected}"
                fi
                ;;
            6)
                printf 'Enter username to revoke: '
                local user
                read -r user || true
                if [[ -n "${user:-}" ]]; then
                    cmd_revoke_user "${user}"
                else
                    ui_warn "No username provided."
                fi
                ;;
            7) cmd_list_backups ;;
            8)
                printf 'Enter backup path to restore: '
                local backup
                read -r backup || true
                if [[ -n "${backup:-}" ]]; then
                    cmd_rollback "${backup}"
                else
                    ui_warn "No backup selected."
                fi
                ;;
            9|q|Q) break ;;
            *) ui_warn "Invalid choice." ;;
        esac
        printf '\nPress Enter to continue...'
        read -r _ || true
    done
}

dispatch() {
    case "${SUBCOMMAND}" in
        status) cmd_status ;;
        enable-password-login) cmd_enable_password ;;
        disable-password-login) cmd_disable_password ;;
        enable-root-password) cmd_enable_root_password ;;
        disable-root-password) cmd_disable_root_password ;;
        allow-password-for-user) cmd_allow_user "${SUBCOMMAND_ARGS[0]:-}" ;;
        revoke-password-for-user) cmd_revoke_user "${SUBCOMMAND_ARGS[0]:-}" ;;
        list-backups) cmd_list_backups ;;
        rollback) cmd_rollback "${SUBCOMMAND_ARGS[0]:-}" ;;
        interactive) interactive_menu ;;
        *)
            ui_usage
            exit 1
            ;;
    esac
}

main() {
    parse_args "$@"
    auth_init
    auth_detect_service_manager
    auth_require_root
    auth_require_sshd
    dispatch
}

main "$@"
